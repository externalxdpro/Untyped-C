#+title: Untyped-C

* Overview
This is my own programming language, called UC, or Untyped C. This language, as can be determined by the name, will be similar to C/C++ but with weak typing. Then a Python program will translate that language into Python and execute it.
* Features
+ C/C++-like syntax
+ Basic syntax checker
* Syntax
#+NOTE: For all of the code blocks, the opening curly bracket can be on the same line or next line
** Comments
Comments are written using double-slashes just like C:
#+begin_src C
// This is a comment
#+end_src
** Semicolons
Semicolons at the end of lines are optional:
#+begin_src C
print("hello");     // valid
print("hello")      // also valid
#+end_src

They're most useful when writing multiple statements on one line:
#+begin_src C
print("hello"); print("hello again")
#+end_src
** Variable Initialization
Variable initialization will look very similar to python but with a semicolon at the end. It will look like ~var = <value>;~}.
** If Statements
An if statement looks just like C:
#+begin_src C
if (/*condition>*/) {
    // code to execute if condition is met
}
#+end_src

Example:
#+begin_src C
if (a == 2){
    a += 1;
}
#+end_src
** For loops
The format should be just like C but with commas instead of semicolons:
#+begin_src C
for (/*variable initialization*/ , /*variable condition*/, /*variable iteration*/) {
    // code to execute in loop
}
#+end_src

Example:
#+begin_src C
for (i = 0, i < 500, i += 1) {
    print(i);
}
#+end_src
** For-each loops
The format should be similar to C++'s range-based for loop syntax:
#+begin_src C
for (/*var name*/ : /*iterable name*/) {
    // code to execute in loop
}
#+end_src

Example:
#+begin_src C
nums = [1, 2, 3, 4];
for (i : nums)
{
    print(i);
}
#+end_src
** While loops
A while loop will be exactly the same as C:
#+begin_src C
while (/*condition*/) {
    // code to execute in loop
}
#+end_src

Example:
#+begin_src C
while (i < 500) {
    print(i);
    i += 1;
}
#+end_src
** Functions
Since there is no explicit typing, the syntax will slightly differ from C. Instead of starting the line with the return type of the function, function declaration will consist of the fn keyword.
#+begin_src C
fn NameOfFunction (/*params*/) {
    // code to execute in function
}
#+end_src

Example:
#+begin_src C
fn add (num1, num2) {
    return num1 + num2;
}
#+end_src
* Example
This can also be found in the =example.uc= file:
#+begin_src C
i = 40

// this is a comment

print("test");

for (i = 0, i < 1, i += 1)
{
    for (j = 0, j > -1, j -= 2)
    {
        print(j)
    }
    print("boi")
}

nums = [1, 2, 3, 4]
for (i : nums)
{
    print(i)
}

j = 0
while (j != 10)
{
    print(j)
    j += 1
}

fn test(num, num2)
{
    print(num + num2)
}

test(1, 2)

print("one thing"); print("another thing")
#+end_src
* Usage
1. Create a file ending in =.uc= and write some code using the custom syntax
2. Run the main python file passing in the =.uc= file as a command-line argument
#+begin_src shell
python3 main.py file.uc
#+end_src
